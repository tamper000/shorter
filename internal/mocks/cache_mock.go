// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=../mocks/cache_mock.go --package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddCache mocks base method.
func (m *MockCache) AddCache(alias, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCache", alias, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCache indicates an expected call of AddCache.
func (mr *MockCacheMockRecorder) AddCache(alias, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCache", reflect.TypeOf((*MockCache)(nil).AddCache), alias, link)
}

// CloseCache mocks base method.
func (m *MockCache) CloseCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseCache")
}

// CloseCache indicates an expected call of CloseCache.
func (mr *MockCacheMockRecorder) CloseCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseCache", reflect.TypeOf((*MockCache)(nil).CloseCache))
}

// DeleteCache mocks base method.
func (m *MockCache) DeleteCache(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCache", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockCacheMockRecorder) DeleteCache(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockCache)(nil).DeleteCache), key)
}

// GetCache mocks base method.
func (m *MockCache) GetCache(alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockCacheMockRecorder) GetCache(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockCache)(nil).GetCache), alias)
}
